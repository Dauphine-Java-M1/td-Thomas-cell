TD 01 (shapes)

Exo1:
1. Cela fonctionne car nous sommes toujours dans la classe même si le champs est private.
2. On ne peut pas car les arguments private ne sont pas visibles en dehors de la classe. On peut remédier à ce problème en introduisant des getters et setters.
3. Par soucis de sémantique, pour l'encapsulation on met les arguments en private car on est censé utiliser les méthodes des classes et pas leurs attribus directement.
4. Un accesseur permet d'avoir accès aux attributs à travers une méthode, dans notre cas il nous faut un getter.
5. Le constructeur par défaut n'est plus défini.
6. Le constructeur ne sait plus différencier les arguments des attributs, il faut donc utiliser this.
7. En rajoutant un compteur static.
8. En regardant le type des variables en entrée.
9. On override la méthode toString de la classe Object.

Exo2:

1. L'opérateur == compare les pointeurs, on veut donc réimplémenter la méthode equals.
3. indexOf() utilise la méthode equals.

Exo3:

6. pointCapacity n'a plus de sens, nbPoints devient la size de la liste, contains revient à utiliser le contains de la liste.

Exo4:
1. Peut retourner void ou un Point, si la méthode retourne void c'est qu'on effectue la modification directement sur l'instance de Point appelante, si l'on retourn Point on ne modifie pas l'instance appelante et on retourne un nouveau Point issu de la translation.

5. Le problème serait apparu si on avait simplement utiliser "=" dans le constructeur pour l'attribution de center, on s'assure donc de créer un point distinct au niveau du constructeur.

6. Le problème devient qu'on peut manier librement un attribut private de la classe sans utiliser les méthodes de la classe on peut donc dénaturer l'objet. Pour résoudre ce problème on utilise du non mutable.

8. Pour cette question on a rajouté une méthode norm2(Point p) dans la classe Point qui calcule la norme 2 entre les deux points.

Exo5:
1. Ce n'est pas intéressant car un Anneau ne partage pas toutes les propriétés d'un cercle.
